#!/usr/bin/env lua

local currentDir = debug.getinfo(1).source:match("@?(.*/)")
-- Ensure Lua always looks for modules in the current directory where 
-- the executable is located, regardless of where the script is run. 
-- If the script is executed from a different directory, Lua may not find 
-- the required modules because it prioritizes searching in the current 
-- working directory and predefined paths. 
-- By default, Lua doesn't automatically search in the directory where the script 
-- or executable resides. To ensure Lua can find the necessary modules, 
-- we explicitly add the script's directory to `package.path`.
package.path = package.path .. ";" .. currentDir .. "?.lua"

local show = require("showItems")
local edit = require("editItem")
local utils = require("utils")
local verbose = false
local category = 'None'
local homeDir = os.getenv("HOME")
local filePath = homeDir .. "/.todos/todos.csv"

function addItem(item)
    local file, error = io.open(filePath, "a")

    if error then
        print("ERROR:", error)
        return
    end

    local itemID = tostring(os.time())
    local itemToAdd = string.format("%s,%s,%s\n", itemID, item, category)
    file:write(itemToAdd)
    file:close()

    if verbose then
        print("Todo Category:" .. category)
    end

    print("Todo Added Successfully!")
end

function removeItem(deleteId)
    local file, error = io.open(filePath, "r")

    if error then
        print("ERROR:", error)
        return
    end

    local lines = file:lines()
    local linesTable = {}

    for line in lines do
        local lineSplitTable = utils.split(line, ",")
        local itemId, _, _ = table.unpack(lineSplitTable)
        if itemId ~= deleteId then
            table.insert(linesTable, line)
        end
    end
    file:close()

    file, error = io.open(filePath, "w")

    if error then
        print("ERROR:", error)
        return
    end

    for _, line in ipairs(linesTable) do
        local itemToAdd = string.format("%s\n", line)
        file:write(itemToAdd)
    end
    file:close()
    print("Todo Removed Successfully")

end

function main()
    local command = arg[1]

    for _, value in ipairs(arg) do
        if value == '--verbose' then
            verbose = true
        end
        local pattern = "^%-%-category=.+"
        if string.match(value, pattern) then
            category = string.sub(value, #'--category=' + 1)
        end
    end

    result = os.execute("mkdir -p " .. homeDir .. "/.todos")

    if result ~= true then
        print("Error creating directory: " .. homeDir .. "/.todos")
    end

    if command == "add" then
        local item = arg[2]
        addItem(item)
    elseif command == "remove" then
        local item = arg[2]
        removeItem(item)
    elseif command == "show" then
        show.showItems(filePath, verbose, category)
    elseif command == "edit" then
        local itemId = arg[2]
        local newItemValue = arg[3]
        edit.editItem(filePath, itemId, newItemValue, category)
    else
        print("Invalid command. Use 'add', 'remove', or 'show'.")
    end
end

main()
